<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/4/26 0026
 * Time: 11:43
 */
namespace app\BlogAdmin\controller;
use \think\Controller as Con;
use \think\Db;
use think\Session;
use \think\View;
use \think\Request;
use \app\blogadmin\controller\Base as Base;
use \app\blogadmin\model\article as ArticleModel;
use \app\blogadmin\model\category as CategoryModel;
session_start();
class Category extends Base{

    /*调用Base*/
    public function _initialize()
    {
        parent::check(); // TODO: Change the autogenerated stub
    }

    /**
     * insertCategory  显示
     */
    public function insertCategory(){
        $this->assign([
            'Header'=>"属组管理",
        ]);
        $ArticleModel = new ArticleModel();
        $ArticleDate = $ArticleModel->select();
        $this->assign([
            'ArticleDate' => $ArticleDate,
        ]);
        $this->CategoryDate();
        return $this->fetch('article/category');
    }

    // CategoryDate
    public function categoryDate(){
        $CategoryModel=new CategoryModel();
        $CategoryDate=$CategoryModel->query("select * from tb_category where father_id!=0 and category_id >2 ORDER BY category_id ASC ");
        $this->assign([
            'CategoryDate'=>$CategoryDate,
        ]);
        $FatherDate=$CategoryModel->query("select * from tb_category where father_id=0 and category_id >2 ORDER BY category_id ASC ");
        $this->assign([
            'FatherDate'=>$FatherDate,
        ]);
    }

    /**
     *  添加属组
     */
    public function insert(){
        if(Session::has('admin_id')) {
            $Request = Request::instance();
            if ($Request->has('FatherBtn')) {
                /*添加主属*/
                $CategoryModel=new CategoryModel();
                /*实例传值*/
                $category_name = $Request->post('text');
                $state = $Request->post('state');
                if ($state === "启用")
                    $state = 1;
                else if ($state === "关闭")
                    $state = -1;
                /*判断当前添加的父类是否已存在*/
                if($CategoryModel->where("category_name='$category_name' and father_id=0")->select()){
                    return '<script> alert("当前已父类存在!");window.location.href="../Category/insertCategory" </script>';
                }else {
                    /*实例数组*/
                    $Date = array(
                        'father_id' => 0, //父类id默认为0
                        'category_name' => $category_name,
                        'state' => $state
                    );
                    /*执行数据插入*/
                    $retuen = $CategoryModel->insert($Date);
                    if($retuen>-1)
                        return '<script> alert("父类添加成功,请及时添加其子类!");window.location.href="../Category/insertCategory" </script>';
                }
            }
            if ($Request->has('SonBtn')) {
                /*添加副属*/
                $CategoryModel = new CategoryModel();
                /*实例传值*/
                $father_id=$Request->post('father_id');//父类id
                $category_name = $Request->post('text');
                $state = $Request->post('state');
                if ($state === "启用")
                    $state = 1;
                else if ($state === "关闭")
                    $state = -1;
                /*判断当前添加的子类是否已存在*/
                if($CategoryModel->where("category_name='$category_name' and father_id='$father_id'")->select()){
                    return '<script> alert("当前子类已在其父类存在!");window.location.href="../Category/insertCategory" </script>';
                }else {
                    /*实例数组*/
                    $Date = array(
                        'father_id' => $father_id, //父类id默认为0
                        'category_name' => $category_name,
                        'state' => $state
                    );
                    $retuen = $CategoryModel->insert($Date);
                    if($retuen>-1)
                        return '<script> alert("子类添加成功!");window.location.href="../Category/insertCategory" </script>';
                }


            }
        }else  return $this->fetch('admin/Login');
    }

    /**
     *  修改父类状态
     */
    public  function FatherState(){
        $Request = Request::instance();
        if($Request->has('id') && $Request->has('state')){
            $CategoryModel=new CategoryModel();
            $category_id=$Request->get('id');
            $state = $Request->get('state');
            if($state==1){
                /**/
                $state=-1;
            }
            else  if($state==-1)
                $state=1;
            /*修改父级状态 同时改变子级状态*/
            $retuenFather = $CategoryModel->where(['category_id'=>$category_id])->update(['state'=>$state]);
            $retuenSon = $CategoryModel->where(['father_id'=>$category_id])->update(['state'=>$state]);
            if($retuenFather>-1 && $retuenSon>-1){
                return '<script> alert("父级状态修改成功,其子级状态随改!");window.location.href="../category/insertCategory" </script>';
            }
        }
    }

    /**
     *  修改子类状态
     */
    public  function sonState(){
        $Request = Request::instance();
        if($Request->has('id') && $Request->has('state')){
            $CategoryModel=new CategoryModel();
            $category_id=$Request->get('id');
            $state = $Request->get('state');
            if($state==1)
                $state=-1;
            else  if($state==-1)
                $state=1;
            /*查询其父类的状态、   父类禁用 子类不能启用，*/
            $Father_id=$CategoryModel->where(['category_id'=>$category_id])->column('father_id');
            //$Father_id[0];// 其父类的id
            // 通过父级的id 查询其状态
            $Father_State=$CategoryModel->where(['category_id'=>$Father_id[0]])->column('state');
            if($Father_State[0]>0) {
                /* 其父级的状态为 1 启用状态 可修改其子级的状态*/
                $retuen = $CategoryModel->where(['category_id' => $category_id])->update(['state' => $state]);
                if ($retuen > -1) {
                    return '<script> alert("状态修改成功!");history.go(-1); </script>';
                }
            }else{
                /* 其父级的状态为 -1 禁用状态 不可修改其子级的状态*/
                return '<script> alert("父级已被禁用子级不可修改状态!");window.location.href="../category/insertCategory" </script>';
            }
        }
    }

    /**
     *   删除属组
     */
    public  function delectCategory(){
        if(Session::has('admin_id')) {
            $Request = Request::instance();
            if ($Request->has('id') && $Request->has('type')) {
//                echo $Request->get('id').$Request->get('type');
                $id =$Request->get('id');
                $type = $Request->get('type');
                /*执行操作*/
                if($type === "F"){
                    /*删除父类*/
                    $CategoryModel =new CategoryModel();
                    $RetuenOne = $CategoryModel->where(['category_id'=>$id,"father_id"=>0])->delete();
                    $RetuenTwo = $CategoryModel->where(["father_id"=>$id])->delete();
                    if($RetuenOne>-1 && $RetuenTwo>-1){
                        return '<script> alert("父类删除成功,其子类一并删除!");window.location.href="../category/insertCategory" </script>';
                    }
                } else if($type === "S"){
                    /*删除子类*/
                    $CategoryModel =new CategoryModel();
                    $Retuen = $CategoryModel->where(['category_id'=>$id])->delete();
                    if($Retuen>-1){
                        return '<script> alert("子类删除成功!");window.location.href="../category/insertCategory" </script>';
                    }
                }
            }
        }else   return $this->fetch('admin/Login');
    }

    /**
     *  显示修改父类子类的方法
     */
    public  function showUpdateCategory(){
        $this->assign([
            'Header'=>"属组修改",
        ]);
        $Request =Request::instance();
        if($Request->has('id') && $Request->has('type') ){
            $id =$Request->get('id');
            $type = $Request->get('type');
            $CategoryModel=new CategoryModel();
            $CategoryDate=$CategoryModel->where(['category_id'=>$id ])->select();
            if($type == "S")
                echo "<script> var style =1;</script>";
            else echo "<script> var style =-1;</script>";
            $this->assign([
                'category_name'=>$CategoryDate[0]['category_name'],
                'category_id'=>$CategoryDate[0]['category_id'],
                'state'=>$CategoryDate[0]['state'],
                'father_id'=>$CategoryDate[0]['father_id'],
            ]);
            $FatherDate=$CategoryModel->query("select * from tb_category where father_id=0 and category_id >2 ORDER BY category_id ASC ");
            $this->assign([
                'FatherDate'=>$FatherDate,
            ]);

        }
        return $this->fetch('article/categoryUp');
    }


    /**
     * 修改父类子类的方法
     */
    public function updateFS(){
        if(Session::has('admin_id')){
            $Request = Request::instance();
            if($Request->has('Updatecategory_id') && $Request->has('text')){
                $id =$Request->post('Updatecategory_id');
                $text = $Request->post('text');
                $state = $Request->post('state');  // 文章状态
                $father_id =$Request->post('father_id');
                $CategoryModel=new CategoryModel();
                if($text)
                {
                    if($state==="启用")
                        $state=1;
                    else  if($state==="关闭")
                        $state=-1;
                    $retuen = $CategoryModel->where(['category_id'=>$id])->update(['father_id'=>$father_id,'category_name'=>$text,'state'=>$state]);
                    if($retuen>-1){
                        return  header ( "location: ../category/insertCategory" );
                    }
                }
                else{
                    return '<script> alert("输入项不能为null!");history.go(-1); </script>';
                }
            }
        }else  return $this->fetch('admin/login');
    }
}